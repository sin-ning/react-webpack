
const webpack = require('webpack');
const DashboardPlugin = require('webpack-dashboard/plugin');

module.exports = {
	entry: [
		"webpack-dev-server/client?http://localhost:8080/",
		"babel-polyfill",
		"./src/entry/index.jsx",
		"react"
	],
	output: {
		path: "./dist/",
		filename: "index.js",
		chunkFilename: '[name].[chunkhash:5].chunk.js',
		// filename: '[name].js'
	},
	module: {
		loaders: [
			{ test: /\.less$/, loaders: ["less-loader", "less"] },
			{
				test: /\.js|jsx$/,
				exclude: /(node_modules|bower_components)/,
				loader: 'babel', // 'babel-loader' is also a legal name to reference
				query: {
					presets: ["react", "es2015", "stage-0"]
				}
			},
			{
				test: /\.html$/,
				loader: "html"
			}
		]
	},
	resolve: {
		extensions: ['', '.js', '.jsx'],
	},
	plugins: [
		new DashboardPlugin(),
		// new ExtractTextPlugin("[name].css"),  // 如果我们希望样式通过 <link> 引入，而不是放在 <style> 标签内呢
		new webpack.DefinePlugin({
			'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'development')
		}),
		// new webpack.DefinePlugin({
		// 	'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV)
		// }),
		new webpack.optimize.CommonsChunkPlugin('shared.js'),
		// new webpack.optimize.UglifyJsPlugin({
		// 	compress: {
		// 		warnings: false,
		// 	}
		// })

	]
};


